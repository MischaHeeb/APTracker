services:
  db:
    image: postgres:16-alpine
    container_name: mywebapp-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: aptracker
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - APTracker-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./apps/APTrackerAPI
      dockerfile: Dockerfile
      target: build
    container_name: aptracker-api
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DB_HOST=db
      - DB_NAME=aptracker
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_PORT=5432
    volumes:
      - ./apps/APTrackerAPI:/src
    command: dotnet watch run --project /src/APTrackerAPI.csproj --urls "http://+:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - APTracker-net
    restart: unless-stopped

  web:
    build:
      context: ./apps/APTrackerWeb
      dockerfile: Dockerfile
      target: build
    container_name: aptracker-web
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    volumes:
      - ./apps/APTrackerWeb:/src
    command: dotnet watch run --project /src/APTrackerWeb.csproj --urls "http://+:8080"
    depends_on:
      - api
    networks:
      - APTracker-net
    restart: unless-stopped

networks:
  APTracker-net:
    driver: bridge

volumes:
  postgres-data:
