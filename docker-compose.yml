services:
  db:
    image: postgres:16-alpine
    container_name: mywebapp-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mywebapp
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - EPTracker-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./src/MyWebApp.Api
      dockerfile: Dockerfile
    container_name: mywebapp-api
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=db;Database=mywebapp;Username=postgres;Password=postgres
    depends_on:
      db:
        condition: service_healthy
    networks:
      - EPTracker-net
    restart: unless-stopped

  web:
    build:
      context: ./src/MyWebApp.Web
      dockerfile: Dockerfile
    container_name: mywebapp-web
    ports:
      - "8080:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - api
    networks:
      - EPTracker-net
    restart: unless-stopped

networks:
  EPTracker-net:
    driver: bridge

volumes:
  postgres-data:
